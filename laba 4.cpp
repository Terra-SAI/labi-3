
//Разработать набор классов(минимум 5 классов, связи между
//    классами : агрегация, композиция, наследование) по предметной области
//    «Услуги оператора связи».Функционал программы должен позволить
//    собрать данные об услугах.Сгенерировать минимум пять типов
//    исключительных ситуаций.Реализовать перенаправление исключительных
//    ситуаций.Сгенерировать минимум одну исключительную ситуацию с
//    оператором new.Создать исключительную ситуацию в конструкторе и
//    продемонстрировать вызов конструкторов и деструкторов.Задать
//    собственную функцию завершения.Создать собственный(пользовательский)
//    класс исключения, сгенерировать исключение этого типа и обработать его.
//#include <iostream>
//#include <vector>
//#include "Baaaaaase.h"
//
//#include "FilesMe.h"
//
//
//void terminateFunction()
//{
//    cout << "Вы все сломали!!!";
//    abort();
//}
//
//int menu()
//{
//    cout << "Что вы хотите сделать?  \n1 - Добавить роуминг   \n2 - Добавить интернет   \n3 - Добавить сотовую связь   \n4 - Удалить кого-нибудь    \n5 - Посмотреть список услуг   \n6 - Выйди отсюда, разбийник\n";
//    int n;
//    cin >> n;
//    if (n < 1 || n>6)
//    {
//        cout << "Ошибочка вышла! Всем спасибо, я в отбой ^-^\n";
//        return 6;
//    }
//    return n;
//}
//int main()
//{
//    set_terminate(terminateFunction);
//    Sell* buyIt[20];
//    Roaming roar[20]; Internet inet[20]; CallMeMaybe call[20];
//    int a = 0, b = 0, c = 0, k = 0;
//    Roaming r; Internet i; CallMeMaybe cc;
//    SetConsoleCP(1251);
//    SetConsoleOutputCP(1251);
//    int m = menu();
//    while (true)
//    {
//        switch (m)
//        {
//        case 1: {
//            cin.get();
//            try
//            {
//                r.setInfo();
//                roar[a] = r;
//                buyIt[k++] = &roar[a];
//                a++;
//            }
//            catch(int) { cout << "Вы вообще планируете предлагать нормальные условия? \nЯ отказываюсь с таким работать, тут скидка больше 100%, ну...\n"; }
//            break; }
//        case 2: {
//            cin.get();
//            try
//            {
//                i.setInfo();
//                inet[b] = i;
//                buyIt[k++] = &inet[b];
//                b++;
//            }
//            catch (int) { cout << "Вы вообще планируете предлагать нормальные условия? \nЯ отказываюсь с таким работать, тут скидка больше 100%, ну...\n"; }
//            break; }
//        case 3: {
//            cin.get();
//            try
//            {
//                cc.setInfo();
//                call[c] = cc;
//                buyIt[k++] = &call[c];
//                c++;
//            }
//            catch (int) { cout << "Вы вообще планируете предлагать нормальные условия? \nЯ отказываюсь с таким работать, тут скидка больше 100%, ну...\n"; }
//            break; }
//        case 4: 
//        {
//            for (int i = 0; i < k; i++)
//            {
//                cout << "\nНомер услуги: " << i + 1 << endl;
//                buyIt[i]->showInfo();
//            }
//            cout << "Введите номер услуги, которую Вы хотите удалить? ";
//            cin.get();
//            int n = checkPositiveIntNumber();
//            n--;
//            if (n >= k) cout << "Тут как бы меньше элемнтов, подумайте ещё раз, а потом приходите..." << endl;
//            else {
//                while (n < k)
//                {
//                    buyIt[n] = buyIt[n + 1];
//                    n++;
//                }
//                k--;
//            }
//        //вот тут мы и закончим Было приятно с вами порабоатт, а сейчас я хочу спать
//            break;
//        }
//        case 5: 
//        { 
//            for (int i = 0; i < k; i++)
//            {
//                cout << "\nНомер услуги: " << i + 1 << endl;
//                buyIt[i]->showInfo();
//            }
//            break; 
//        }
//        case 6: cout << "Вот и до свидания!"; return 0;
//        }
//        m = menu();
//    }
//}